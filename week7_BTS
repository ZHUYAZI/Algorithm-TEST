#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Nov  2 20:45:00 2019

@author: yazi
"""
class TreeNode():
    def __init__(self,key,val,left=None,right=None,parent=None):
        self.key=key
        self.payload=val
        self.leftChild=left
        self.rightChild=right
        self.parent=parent
        
    def hasLeftChild(self):
        return self.leftChild
        
    def hasRightChild(self):
        return self.rightChild
    
    def isLeftChild(self):
        return self.parent and self.parent.leftChild==self 
    
    def isRightChild(self):
        return self.parent and self.parent.rightChild==self
    
    def isRoot(self):
        return not self.parent
        
    def isLeaf(self):
        return not (self.rightChild or self.leftChild)
        
    def hasAnyChildren(self):
        return self.rightChild or self.leftChild
    
    def hasBothChildren(self):
        return self.rightChild and self.leftChild
        
    def replaceNodeData(self,key,value,lc,rc,pc):
        self.key=key
        self.payload=value
        self.leftChild=lc
        self.rightChild=rc
        if self.hasLeftChild():
            self.leftChild.parent=self
        if self.hasRightChild():
            self.rightChild.parent=self
            
        self.parent=pc
            
    def findSuccessor(self):
        succ = None
        if self.hasRightChild():
            succ = self.rightChild.findMin()
        else:
            if self.parent:
                   if self.isLeftChild():
                       succ = self.parent
                   else:
                       self.parent.rightChild = None
                       succ = self.parent.findSuccessor()
                       self.parent.rightChild = self
        return succ  
    
    def findMin(self):
        current = self
        while current.hasLeftChild():
            current = current.leftChild
        return current
    
    def spliceOut(self):
        if self.isLeaf():
            if self.isLeftChild():
                   self.parent.leftChild = None
            else:
                   self.parent.rightChild = None
        elif self.hasAnyChildren():
            if self.hasLeftChild():
                   if self.isLeftChild():
                      self.parent.leftChild = self.leftChild
                   else:
                      self.parent.rightChild = self.leftChild
                   self.leftChild.parent = self.parent
            else:
                   if self.isLeftChild():
                      self.parent.leftChild = self.rightChild
                   else:
                      self.parent.rightChild = self.rightChild
                   self.rightChild.parent = self.parent
                   
                   
class BinarySearchTree():
    def __init__(self):
        self.root=None
        self.size=0
       
    def length(self):
        return self.size
    
    def __len__(self):
        return self.size
    
    def __iter__(self):
        return self.root.__iter__()
    
    def put(self,key,value):
        if self.root:
            self._put(key,value,self.root)
        else:
            self.root=TreeNode(key,value)
            
        self.size=self.size+1
        
    def _put(self,key,val,currentNode):
        if key < currentNode.key:
            if currentNode.hasLeftChild():
                   self._put(key,val,currentNode.leftChild)
            else:
                   currentNode.leftChild = TreeNode(key,val,parent=currentNode)
        else:
            if currentNode.hasRightChild():
                   self._put(key,val,currentNode.rightChild)
            else:
                   currentNode.rightChild = TreeNode(key,val,parent=currentNode)
    
    def __setitem__(self,k,v):
        self.put(k,v)
        
        
    def get(self,key):
        if self.root:
            res = self._get(key,self.root)
            if res:
                   return res.payload
            else:
                   return None
        else:
            return None

    def _get(self,key,currentNode):
        if not currentNode:
            return None
        elif currentNode.key == key:
            return currentNode
        elif key < currentNode.key:
            return self._get(key,currentNode.leftChild)
        else:
            return self._get(key,currentNode.rightChild)
    
    def __getitem__(self,key):
        return self.get(key)
    
    def __contains__(self,key):
        if self._get(key,self.root):
            return True
        else:
            return False
        
        
    def delete(self,key):
       if self.size > 1:
          nodeToRemove = self._get(key,self.root)
          if nodeToRemove:
              self.remove(nodeToRemove)
              self.size = self.size-1
          else:
              raise KeyError('Error, key not in tree')
       elif self.size == 1 and self.root.key == key:
          self.root = None
          self.size = self.size - 1
       else:
          raise KeyError('Error, key not in tree')

    def __delitem__(self,key):
        self.delete(key)
        

    
    def remove(self,currentNode):
        if currentNode.isLeaf():
            if currentNode == currentNode.parent.leftChild:
                currentNode.parent.leftChild = None
            else:
                currentNode.parent.rightChild = None
        
        elif currentNode.hasBothChildren(): #interior
                succ = currentNode.findSuccessor()
                succ.spliceOut()
                currentNode.key = succ.key
                currentNode.payload = succ.payload        
                        
        
        else: # this node has one child
           if currentNode.hasLeftChild():
              if currentNode.isLeftChild():
                  currentNode.leftChild.parent = currentNode.parent
                  currentNode.parent.leftChild = currentNode.leftChild
              elif currentNode.isRightChild():
                  currentNode.leftChild.parent = currentNode.parent
                  currentNode.parent.rightChild = currentNode.leftChild
              else:
                  currentNode.leftChild.replaceNodeData(currentNode.leftChild.key,
                                     currentNode.leftChild.payload,
                                     currentNode.leftChild.leftChild,
                                     currentNode.leftChild.rightChild,
                                     None)
                  self.root=currentNode.leftChild
           else:
              if currentNode.isLeftChild():
                  currentNode.rightChild.parent = currentNode.parent
                  currentNode.parent.leftChild = currentNode.rightChild
              elif currentNode.isRightChild():
                  currentNode.rightChild.parent = currentNode.parent
                  currentNode.parent.rightChild = currentNode.rightChild
              else:
                  currentNode.rightChild.replaceNodeData(currentNode.rightChild.key,
                                     currentNode.rightChild.payload,
                                     currentNode.rightChild.leftChild,
                                     currentNode.rightChild.rightChild,
                                     None)
                  
                  self.root=currentNode.rightChild

    def get_size(self,currentNode):
        subsize1=0
        subsize2=0
        
        if currentNode.isLeaf():
            currentNode.payload=1
#            print(currentNode.key,1)
            return 1
        else:
            if currentNode.hasLeftChild():
                subsize1=self.get_size(currentNode.leftChild)
            if currentNode.hasRightChild():
               
                subsize2=self.get_size(currentNode.rightChild)
                 
            subsize=subsize1+subsize2+1
#            print(currentNode.key,subsize)
            currentNode.payload=subsize
            return subsize
    
    def findindex(self,index,currentNode):

        if currentNode.hasLeftChild():
            if index< currentNode.leftChild.payload+1:
                return self.findindex(index,currentNode.leftChild)
            elif index> currentNode.leftChild.payload+1:
                return self.findindex(index-currentNode.leftChild.payload-1,currentNode.rightChild)
            else:
                return currentNode.key
        else :
            if index== 1:
                return currentNode.key
            else:
                return self.findindex(index-1,currentNode.rightChild)
 
                
        
if __name__=='__main__':
    mytree = BinarySearchTree()
#    mytree[5]=0
#    mytree[3]=0
#    mytree[2]=0
#    mytree[4]=0
#    mytree[6]=0
#    mytree[7]=0
    sum=0
    import urllib.request
    target_url='https://d3c33hcgiwev3.cloudfront.net/_6ec67df2804ff4b58ab21c12edcb21f8_Median.txt?Expires=1572825600&Signature=G~0QPn8qvUgy4b~lVV8NyoIwwZ0uaMq0mmCboM6IAwlOIaJkJHf0O3rKUKLvHesfrzp-A54eoxMFyL6zQbWXlGLRaI9wWzsgqB7YX8LAzk9EAU~HeoqRFgGjBzmpj5dJUIY4mfO27LXPt1Rn1spK2iAL0NMW~n57ZyAfZ9UG2WI_&Key-Pair-Id=APKAJLTNE6QMUY6HBC5A'
    file = urllib.request.urlopen(target_url)
    num=0
    for line in file:
        num+=1
        a=line.decode("utf-8").strip()
        mytree[int(a)]=0
        mytree.get_size(mytree.root)
        media=(len(mytree)+1)//2
        print(num)
        sum+=mytree.findindex(media,mytree.root)

    print(sum)
    
